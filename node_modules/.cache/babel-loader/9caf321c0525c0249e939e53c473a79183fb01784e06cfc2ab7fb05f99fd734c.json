{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dogan\\\\Desktop\\\\Kelimo-24092025\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// 📁 components/App.jsx\nimport { useEffect, useRef, useState } from 'react';\n\n// Context\nimport { SocketProvider } from './context/SocketContext';\n\n// Screens\nimport LoginScreen from './components/LoginScreen';\nimport RegisterScreen from './components/RegisterScreen';\nimport StartScreen from './components/StartScreen';\nimport MyGamesScreen from './components/MyGamesScreen';\nimport NewMatchScreen from './components/NewMatchScreen';\nimport GameScreen from './components/GameScreen';\nimport GameOverScreen from './components/GameOverScreen';\n\n// Popups\nimport InvitePopup from './components/InvitePopup';\n\n// Hooks / Utils\nimport { useTimer } from './hooks/useTimer';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  window.addEventListener('error', event => {\n    console.error('Global error:', event.error);\n  });\n  window.addEventListener('unhandledrejection', event => {\n    console.error('Unhandled promise rejection:', event.reason);\n  });\n\n  //Kullanıcı Bilgileri ve Giriş\n  const [username, setUsername] = useState(() => {\n    return sessionStorage.getItem('username') || '';\n  });\n  const [userData, setUserData] = useState(null);\n  const [loginError, setLoginError] = useState('');\n  // Sabitler\n  const DEFAULT_AVATAR = 'https://ui-avatars.com/api/?name=Anon&background=random&bold=true';\n  //Kullanıcı Bilgileri devam\n  const [profileImage, setProfileImage] = useState(() => {\n    const saved = sessionStorage.getItem(`profileImage_${username}`);\n    return saved || DEFAULT_AVATAR;\n  });\n  const [infoMessage, setInfoMessage] = useState('');\n  //Ekran ve geçiş yönetimi\n  const [currentGame, setCurrentGame] = useState(null);\n  const [currentScreen, setCurrentScreen] = useState(() => {\n    const saved = sessionStorage.getItem('currentScreen');\n    const savedGameOverData = sessionStorage.getItem('gameOverData');\n    const validScreens = ['login', 'register', 'start', 'game', 'gameOver', 'newMatch', 'myGames'];\n    if (saved === 'game' && savedGameOverData) {\n      console.warn('[INIT] Oyun bitmişti, gameOver ekranına dönülüyor.');\n      return 'gameOver';\n    }\n    return validScreens.includes(saved) ? saved : 'login';\n  });\n  const [gameKey, setGameKey] = useState(0);\n\n  //Oyun verileri\n  const [board, setBoard] = useState(Array(5).fill(null).map(() => Array(5).fill('')));\n  const [turnData, setTurnData] = useState(null);\n  const [scores, setScores] = useState({\n    myScore: 0,\n    opponentScore: 0\n  });\n  const [isMyTurn, setIsMyTurn] = useState(false);\n  const [letterToPlace, setLetterToPlace] = useState(null);\n  const [confirmDisabled, setConfirmDisabled] = useState(false);\n  const [enteredLetter, setEnteredLetter] = useState('');\n  const [tempPosition, setTempPosition] = useState(null);\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [selectedLetter, setSelectedLetter] = useState(null);\n  const [statusMessage, setStatusMessage] = useState('');\n  const [message, setMessage] = useState('');\n  const [gameEnded, setGameEnded] = useState(false);\n  const [gameId, setGameId] = useState(null);\n  const [isReconnect, setIsReconnect] = useState(false);\n  const [activeGamesState, _setActiveGamesState] = useState([]);\n  const setActiveGames = data => {\n    console.log('[GLOBAL SET activeGames] çağrısı, stack:', new Error().stack);\n    console.log('[GLOBAL SET activeGames] data:', data);\n    _setActiveGamesState(data);\n  };\n\n  // Oyun sonu\n  const [gameOverData, setGameOverData] = useState(() => {\n    let savedGameOver = null;\n    try {\n      const saved = sessionStorage.getItem('gameOverData');\n      savedGameOver = saved ? JSON.parse(saved) : null;\n    } catch (e) {\n      console.warn('[WARN] Bozuk gameOverData JSON:', e);\n      savedGameOver = null;\n    }\n    return savedGameOver;\n  });\n  const [showGameOver, setShowGameOver] = useState(false);\n  const [rematchPending, setRematchPending] = useState(false);\n  const [acceptSent, setAcceptSent] = useState(false);\n\n  //Rakip verileri\n  const [opponentUsername, setOpponentUsername] = useState('');\n  const [opponentImage, setOpponentImage] = useState('');\n  const [lastOpponentUsername, setLastOpponentUsername] = useState('');\n\n  //İstatistik ve Geçmiş\n  const [totalGames, setTotalGames] = useState(() => {\n    const saved = sessionStorage.getItem('totalGames');\n    return saved ? parseInt(saved, 10) : 0;\n  });\n  const [wins, setWins] = useState(() => {\n    const saved = sessionStorage.getItem('wins');\n    return saved ? parseInt(saved, 10) : 0;\n  });\n  const [losses, setLosses] = useState(() => {\n    const saved = sessionStorage.getItem('losses');\n    return saved ? parseInt(saved, 10) : 0;\n  });\n  const [averageScore, setAverageScore] = useState(0);\n  const [recentGames, setRecentGames] = useState([]);\n\n  //Davet\n  const [invitePopup, setInvitePopup] = useState({\n    visible: false,\n    from: null\n  });\n\n  //Sistem, Socket ve Bağlantı\n  const [onlineCount, setOnlineCount] = useState(0);\n  const socketRef = useRef(null);\n  const reconnectAttemptsRef = useRef(0);\n  const reconnectTimeoutRef = useRef(null);\n  const MAX_RECONNECT_ATTEMPTS = 5;\n\n  //Zamanlayıcı Sistemi\n  const {\n    timer,\n    startTimer,\n    stopTimer\n  } = useTimer();\n  const calculatedWinRate = totalGames > 0 ? Math.round(wins / totalGames * 100) : 0;\n  const formatScore = value => {\n    const num = parseFloat(value);\n    return num % 1 === 0 ? num.toFixed(0) : num.toFixed(1);\n  };\n  const calculatedAverageScore = recentGames.length > 0 ? formatScore(recentGames.reduce((sum, g) => sum + (g.score || 0), 0) / recentGames.length) : \"0.0\";\n\n  // 👤 Profil / Avatar işlemleri\n  function handleAvatarChange(imgUrl) {\n    setProfileImage(imgUrl);\n    sessionStorage.setItem(`profileImage_${username}`, imgUrl);\n    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\n      console.log('[WS SEND] updateProfileImage', {\n        profileImage: imgUrl\n      });\n      socketRef.current.send(JSON.stringify({\n        type: 'updateProfileImage',\n        profileImage: imgUrl\n      }));\n    }\n  }\n\n  // 🔐 Kullanıcı login işlemi\n  function handleLogin(u, p) {\n    if (!socketRef.current || socketRef.current.readyState !== 1) {\n      console.warn('WebSocket bağlantısı henüz hazır değil.');\n      return;\n    }\n    console.log('[App.js] onLogin çağrılıyor, gönderilen veri:', {\n      type: 'login',\n      username: u,\n      password: p,\n      isReconnect: false\n    });\n    console.log('[App.js] onLogin çağrıldı:', u, p);\n    setUsername(u);\n    sessionStorage.setItem('username', u);\n    socketRef.current.send(JSON.stringify({\n      type: 'login',\n      username: u,\n      password: p,\n      isReconnect: false // 🔐 manuel giriş → reconnect değil\n    }));\n  }\n  function joinGame(game) {\n    if (!game) {\n      console.warn('[WARN] joinGame null veya undefined game aldı');\n      return; // game yoksa fonksiyon burada durur\n    }\n    console.log('[App.js] joinGame çağrıldı:', game.gameId);\n    if (socketRef.current && socketRef.current.readyState === 1) {\n      var _game$yourTurn;\n      console.log('[App.js] socketRef.current.readyState:', socketRef.current.readyState);\n      console.log('[CLIENT][JOIN] joinGame mesajı gönderiliyor:', game.gameId);\n      socketRef.current.send(JSON.stringify({\n        type: 'joinGame',\n        gameId: game.gameId\n      }));\n      console.log('[joinGame] game objesi içeriği:', game);\n      setCurrentGame({\n        gameId: game.gameId || null,\n        opponentUsername: game.opponentUsername || '',\n        opponentImage: game.opponentImage || DEFAULT_AVATAR,\n        yourTurn: (_game$yourTurn = game.yourTurn) !== null && _game$yourTurn !== void 0 ? _game$yourTurn : false\n      });\n    } else {\n      console.warn('WebSocket bağlı değil.');\n    }\n  }\n\n  // ♻️ Oyun sıfırlama\n  const resetGameState = () => {\n    console.log('--- resetGameState başlatıldı ---');\n    setBoard(Array(5).fill(null).map(() => Array(5).fill('')));\n    setScores({\n      myScore: 0,\n      opponentScore: 0\n    });\n    setTurnData(null);\n    setGameEnded(false);\n    setGameOverData(null);\n    setLetterToPlace(null);\n    setStatusMessage('');\n    setConfirmDisabled(false);\n    setEnteredLetter('');\n    setTempPosition(null);\n    setSelectedCell(null);\n    setSelectedLetter(null);\n    setLastOpponentUsername('');\n    sessionStorage.removeItem('gameOverData');\n    setMessage('');\n    setIsMyTurn(false);\n    setGameKey(prevKey => prevKey + 1); // Her sıfırlamada key'i artır\n    console.log(`GameScreen key güncellendi: ${gameKey + 1}`);\n  };\n\n  // 🔁 Rematch\n  const handleRematch = opponentUsername => {\n    if (!opponentUsername) {\n      console.warn('[WARN] opponentUsername bilinmiyor, rematch gönderilemez.');\n      return;\n    }\n    console.log('[DEBUG] Rematch isteği gönderiliyor:', opponentUsername);\n    socketRef.current.send(JSON.stringify({\n      type: 'invite',\n      to: opponentUsername,\n      fromRematch: true\n    }));\n    setRematchPending(true); // ✅ App.js içinde tanımlı olan state\n  };\n  function safeSend(message) {\n    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\n      console.log('[WS SEND] Gönderilen mesaj:', message);\n      socketRef.current.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket bağlantısı açık değil, mesaj gönderilemiyor:', message);\n      // Burada istersen mesajı bir kuyrukta tutup bağlantı açılınca gönderebilirsin\n    }\n  }\n  function fetchActiveGames() {\n    debugger; // <-- BURAYA\n    fetch(`/get-active-games?username=${encodeURIComponent(username)}`).then(res => {\n      if (!res.ok) {\n        // Yanıt başarılı değilse\n        throw new Error(`HTTP hatası! Status: ${res.status}`);\n      }\n      return res.json();\n    }).then(data => {\n      // Eğer backend doğrudan dizi döndürüyorsa:\n      // const gamesList = Array.isArray(data) ? data : data.activeGames || [];\n      // Sonra filtrele\n      const gamesList = data && Array.isArray(data.activeGames) ? data.activeGames : Array.isArray(data) ? data : [];\n      setActiveGames(gamesList.filter(g => g.status === 'ongoing'));\n    }).catch(err => console.error('Aktif oyunlar alınamadı:', err));\n  }\n\n  // 🌐 WebSocket bağlantısını başlat\n  function initializeWebSocket() {\n    debugger; // <-- Buraya ekleyin\n    const socket = new WebSocket('ws://localhost:3001');\n    socketRef.current = socket;\n    socket.onopen = () => {\n      console.log('✅ WebSocket bağlantısı kuruldu.');\n      reconnectAttemptsRef.current = 0;\n      const storedUsername = sessionStorage.getItem('username');\n      if (storedUsername) {\n        console.log('[Reconnect] Otomatik login atılıyor:', storedUsername);\n        const storedGameId = sessionStorage.getItem('gameId');\n        safeSend({\n          // veya socket.send(...) — hangisini kullanıyorsan\n          type: 'login',\n          username: storedUsername,\n          isReconnect: true,\n          gameId: storedGameId || null\n        });\n      }\n    };\n    socket.onmessage = event => {\n      var _data$winRate, _data$averageScore, _data$wins, _data$losses, _data, _data2, _data$yourTurn, _data$letterToPlace, _data$turnStartTime, _data$turnDuration, _data$letterToPlace2, _data$letterToPlace3, _data$playerScore, _data$opponentScore;\n      console.log('[WS] Gelen ham veri:', event.data);\n      if (!event.data) {\n        console.warn('[WS] Boş mesaj geldi, işlenmiyor.');\n        return;\n      }\n      let data;\n      try {\n        data = JSON.parse(event.data);\n      } catch (e) {\n        console.error('[WS] JSON parse hatası, gelen ham veri:', event.data);\n        return;\n      }\n      if (!data.type) {\n        console.warn('[WS] Tipi olmayan mesaj alındı:', data);\n        return;\n      }\n\n      // 🔍 Tüm gelen mesajı logla\n      console.log('[WS] Gelen mesaj:', data);\n\n      // Eğer JSON-RPC hatası varsa\n      try {\n        if (data.error) {\n          console.error('[WS] JSON-RPC Hatası:', data.error);\n        }\n      } catch (err) {\n        console.error('[WS] Error loglanırken patladı:', err);\n      }\n      switch (data.type) {\n        case 'loginSuccess':\n          console.log('loginSuccess alındı, startScreen açılıyor...');\n          const lowerUsername = data.username.toLowerCase();\n          setUsername(lowerUsername);\n          console.log('[DEBUG] setUsername loginSuccess ile çağrıldı:', lowerUsername);\n          sessionStorage.setItem('username', lowerUsername); // yeni satır\n\n          setUserData({\n            username: lowerUsername,\n            winRate: (_data$winRate = data.winRate) !== null && _data$winRate !== void 0 ? _data$winRate : 0,\n            averageScore: (_data$averageScore = data.averageScore) !== null && _data$averageScore !== void 0 ? _data$averageScore : 0,\n            wins: (_data$wins = data.wins) !== null && _data$wins !== void 0 ? _data$wins : 0,\n            losses: (_data$losses = data.losses) !== null && _data$losses !== void 0 ? _data$losses : 0\n          });\n          const gamesList = Array.isArray(data.activeGames) ? data.activeGames : [];\n          setActiveGames(gamesList.filter(g => (g === null || g === void 0 ? void 0 : g.status) === 'ongoing'));\n          setCurrentScreen('start');\n          break;\n        case 'loginFailure':\n          setLoginError(data.message || 'Geçersiz kullanıcı adı veya şifre.');\n          break;\n        case 'setUsernameAck':\n          console.log(\"✅ Kullanıcı adı sunucu tarafından onaylandı.\");\n          break;\n        case 'status':\n          console.log('[App.js] Status mesajı:', data.message);\n          setStatusMessage(data.message);\n          break;\n        case 'invite':\n          console.log('[CLIENT DEBUG] Gelen davet kimden:', data.from);\n          console.log('[CLIENT DEBUG] Benim kullanıcı adım:', username);\n          if (!data.from) {\n            console.warn('[CLIENT] 🚫 Gelen davet geçersiz, gönderici yok.');\n            return;\n          }\n          if (!username) {\n            console.warn('[CLIENT] ⚠️ Kullanıcı adı henüz gelmemiş, davet işlenemedi. Bekletiliyor...');\n            setTimeout(() => {\n              if (data.from !== username) {\n                console.log('[CLIENT] 🔁 Bekletilen davet şimdi işleniyor.');\n                setInvitePopup({\n                  visible: true,\n                  from: data.from\n                });\n              } else {\n                console.log('[CLIENT] ⛔ Bekletilen davet kendinden geldi, işlenmedi.');\n              }\n            }, 100);\n            return;\n          }\n          if (data.from === username) {\n            console.warn('[CLIENT] 🚫 Kendi gönderdiğim davet, işlenmeyecek.');\n            return;\n          }\n          console.log('[App.js] ✅ Davet geldi, popup açılıyor:', data);\n          setInvitePopup({\n            visible: true,\n            from: data.from\n          });\n          break;\n        case 'onlineCount':\n          console.log('[WS] 🔢 Online kullanıcı sayısı mesajı alındı:', data.count);\n          setOnlineCount(data.count);\n          console.log('[App.js] 🔢 Online kullanıcı sayısı (state sonrası):', data.count);\n          break;\n        case 'start':\n          console.log('[CLIENT] Yeni gameId alındı:', data.gameId); // <== BURAYA\n          console.log('[CLIENT][RECONNECT] start mesajı geldi');\n          console.log('[CLIENT][RECONNECT] yourTurn:', data.yourTurn);\n          console.log('[CLIENT][RECONNECT] letterToPlace:', data.letterToPlace);\n          console.log('[CLIENT][START] Gelen start verisi:', JSON.stringify(data, null, 2));\n          if (data.gameId) {\n            setGameId(data.gameId); // ✅ burada state'e yazılıyor\n            sessionStorage.setItem('gameId', data.gameId);\n          }\n          if (!(gameOverData && currentScreen === 'gameOver')) {\n            if (currentScreen !== 'game') {\n              console.log('[TRACE] setCurrentScreen(\"game\") çağrıldı — DOSYA içinde tam yer: X satırı');\n              setCurrentScreen('game');\n            }\n          }\n          setOpponentImage(((_data = data) === null || _data === void 0 ? void 0 : _data.opponentImage) || DEFAULT_AVATAR);\n          setOpponentUsername(((_data2 = data) === null || _data2 === void 0 ? void 0 : _data2.opponentUsername) || '');\n          setCurrentGame({\n            gameId: data.gameId || null,\n            opponentUsername: data.opponentUsername || '',\n            opponentImage: data.opponentImage || DEFAULT_AVATAR,\n            yourTurn: (_data$yourTurn = data.yourTurn) !== null && _data$yourTurn !== void 0 ? _data$yourTurn : false,\n            letterToPlace: (_data$letterToPlace = data.letterToPlace) !== null && _data$letterToPlace !== void 0 ? _data$letterToPlace : null,\n            turnStartTime: (_data$turnStartTime = data.turnStartTime) !== null && _data$turnStartTime !== void 0 ? _data$turnStartTime : null,\n            turnDuration: (_data$turnDuration = data.turnDuration) !== null && _data$turnDuration !== void 0 ? _data$turnDuration : null\n          });\n          const reconnect = !data.invite && !data.fromRematch;\n          console.log('[CLIENT][APP] reconnect değeri:', reconnect);\n          setIsReconnect(reconnect);\n          if (!reconnect) {\n            resetGameState();\n          }\n          setLetterToPlace((_data$letterToPlace2 = data.letterToPlace) !== null && _data$letterToPlace2 !== void 0 ? _data$letterToPlace2 : null);\n          setTurnData({\n            letterToPlace: (_data$letterToPlace3 = data.letterToPlace) !== null && _data$letterToPlace3 !== void 0 ? _data$letterToPlace3 : null,\n            turnStartTime: data.turnStartTime,\n            turnDuration: data.turnDuration\n          });\n          break;\n        case 'boardState':\n          setBoard(data.board);\n          break;\n        case 'turn':\n          console.log('[CLIENT] Gelen turn mesajı:', data);\n          if (gameOverData) {\n            console.log('[turn] Oyun bitti, turn mesajı yoksayılıyor.');\n            break;\n          }\n          setTurnData(data);\n          console.log('[TRACE] setCurrentScreen(\"game\") çağrıldı — DOSYA içinde tam yer: X satırı');\n          setCurrentScreen('game');\n          const isMyTurnNow = data.currentPlayer === username;\n          console.log('[CLIENT] Hesaplanan yourTurn:', isMyTurnNow);\n          setIsMyTurn(isMyTurnNow);\n          if (typeof data.remainingTime === 'number' && data.yourTurn === true) {\n            const remainingSeconds = Math.floor(data.remainingTime / 1000);\n            console.log('[CLIENT] ⏱ Timer başlatılıyor (zorla):', remainingSeconds);\n            startTimer(remainingSeconds);\n          }\n          break;\n        case 'promptOwnLetter':\n          setMessage('Rakibin harfi yerleştirildi. Şimdi kendi harfini gir.');\n          break;\n        case 'promptOpponentLetter':\n          setLetterToPlace(data.letter);\n          setStatusMessage(`Rakip harfi \"${data.letter}\" geldi. Yerleştirmek için bir hücre seç.`);\n          break;\n        case 'opponentPlacedLetter':\n          setStatusMessage(`Rakip oyuncu \"${data.letter}\" harfini gönderdi. Yerleştirmeni bekliyor.`);\n          setLetterToPlace(data.letter);\n          break;\n        case 'updateScores':\n          setScores({\n            myScore: data.playerScore,\n            opponentScore: data.opponentScore\n          });\n          break;\n        case 'gameOver':\n          console.log('[CLIENT][DEBUG] gameOver mesajı alındı. Gelen data:', data);\n          console.log('[CLIENT][DEBUG] data.opponentUsername:', data.opponentUsername);\n          const currentUsername = (userData === null || userData === void 0 ? void 0 : userData.username) || username || sessionStorage.getItem('username') || '';\n          console.log('[DEBUG] reportScore gönderiliyor:', {\n            username: currentUsername,\n            score: data.playerScore,\n            won: data.playerScore > data.opponentScore\n          });\n          setGameEnded(true);\n          setStatusMessage('Oyun Bitti!');\n          setConfirmDisabled(true); // bu state varsa\n          setGameOverData({\n            playerScore: (_data$playerScore = data.playerScore) !== null && _data$playerScore !== void 0 ? _data$playerScore : 0,\n            opponentScore: (_data$opponentScore = data.opponentScore) !== null && _data$opponentScore !== void 0 ? _data$opponentScore : 0,\n            playerDetails: data.playerDetails || {},\n            opponentDetails: data.opponentDetails || {},\n            playerBoardHTML: data.playerBoardHTML || '',\n            opponentBoardHTML: data.opponentBoardHTML || '',\n            opponentUsername: data.opponentUsername || '',\n            username: currentUsername\n          });\n          sessionStorage.setItem('gameOverData', JSON.stringify({\n            playerScore: data.playerScore,\n            opponentScore: data.opponentScore,\n            playerDetails: data.playerDetails,\n            opponentDetails: data.opponentDetails,\n            playerBoardHTML: data.playerBoardHTML,\n            opponentBoardHTML: data.opponentBoardHTML,\n            opponentUsername: data.opponentUsername,\n            username: currentUsername\n          }));\n          setCurrentScreen('gameOver');\n          setShowGameOver(true); // oyun sonu ekranını göster\n\n          safeSend({\n            type: 'reportScore',\n            username: currentUsername,\n            score: data.playerScore,\n            won: data.playerScore > data.opponentScore\n          });\n          fetchActiveGames();\n          break;\n        case 'rematchStart':\n          console.log('[CLIENT] rematchStart alındı.');\n          resetGameState();\n          setGameEnded(false);\n          setTurnData(null);\n          setGameOverData(null);\n          setBoard(Array(5).fill(null).map(() => Array(5).fill('')));\n          console.log('[TRACE] setCurrentScreen(\"game\") çağrıldı — DOSYA içinde tam yer: X satırı');\n          setCurrentScreen('game');\n          console.log('[CLIENT][DEBUG] Ekran \"game\" olarak ayarlandı. GameScreen yeniden yüklenecek.');\n          setEnteredLetter('');\n          setTempPosition(null);\n          setRematchPending(false);\n          setMessage('Yeni oyun başladı. Hamleni yap.');\n          setShowGameOver(false);\n          setOpponentUsername(data.opponentUsername);\n          setOpponentImage(data.opponentImage);\n          break;\n        default:\n          console.warn('[WS] Bilinmeyen mesaj tipi:', data.type);\n      }\n    };\n    socket.onclose = () => {\n      console.log('❌ WebSocket bağlantısı kapandı.');\n      setStatusMessage('Bağlantı kesildi, tekrar bağlanılıyor...');\n      if (reconnectAttemptsRef.current < MAX_RECONNECT_ATTEMPTS) {\n        const delay = 1000 * Math.pow(2, reconnectAttemptsRef.current); // exponential backoff\n        console.log(`[Reconnect] ${delay}ms içinde yeniden bağlanacak...`);\n        reconnectTimeoutRef.current = setTimeout(() => {\n          reconnectAttemptsRef.current += 1;\n          initializeWebSocket(); // Tüm event handler'ları burada tanımladığın için yeniden çağır\n        }, delay);\n      } else {\n        console.error('[Reconnect] Maksimum deneme sayısına ulaşıldı.');\n        setStatusMessage('Bağlantı kesildi. Lütfen sayfayı yenileyin.');\n        setGameEnded(true);\n      }\n    };\n    socket.onerror = err => {\n      console.error('🔥 WebSocket hatası:', err);\n      setStatusMessage('Bir hata oluştu. Bağlantı sorunu olabilir.');\n      setGameEnded(true);\n    };\n  }\n\n  //SessionStorage Kaydetme ve Okuma\n  useEffect(() => {\n    sessionStorage.setItem('currentScreen', currentScreen);\n  }, [currentScreen]);\n  useEffect(() => {\n    if (username) {\n      sessionStorage.setItem(`profileImage_${username}`, profileImage);\n    }\n  }, [profileImage, username]);\n  useEffect(() => {\n    sessionStorage.setItem('totalGames', totalGames);\n  }, [totalGames]);\n  useEffect(() => {\n    sessionStorage.setItem('wins', wins);\n  }, [wins]);\n  useEffect(() => {\n    sessionStorage.setItem('losses', losses);\n  }, [losses]);\n\n  //App Açılışında Session’dan Yükleme ve Yönlendirme\n  useEffect(() => {\n    const savedScreen = sessionStorage.getItem('currentScreen');\n    const savedUsername = sessionStorage.getItem('username');\n    const savedGameOverData = sessionStorage.getItem('gameOverData');\n    if (savedGameOverData && savedScreen === 'game') {\n      console.log('[SAFELOAD] Oyun bitmişti, gameOver ekranına dönülüyor.');\n      setCurrentScreen('gameOver');\n      return;\n    }\n    if (savedScreen === 'game') {\n      if (!savedUsername) {\n        console.warn('[SAFELOAD] Username yok, login ekranına dönülüyor.');\n        setCurrentScreen('login');\n      } else {\n        console.log('[SAFELOAD] Game ekranı yüklenecek. Username mevcut:', savedUsername);\n      }\n    } else if (savedScreen === 'start') {\n      if (!savedUsername) {\n        console.warn('[SAFELOAD] Start için username yok, login ekranına dönülüyor.');\n        setCurrentScreen('login');\n      } else {\n        setCurrentScreen('start');\n      }\n    }\n  }, []);\n\n  //Kullanıcı Verisi Fetch Etme\n  useEffect(() => {\n    console.log('[FETCH DEBUG] Kullanıcı istatistikleri yükleniyor:', username);\n    if (!username) return;\n    debugger; // BURAYA\n    fetch(`/get-user?username=${username}`).then(res => {\n      if (!res.ok) {\n        // Yanıt başarılı değilse\n        throw new Error(`HTTP hatası! Status: ${res.status}`);\n      }\n      return res.json();\n    }).then(data => {\n      console.log('[DEBUG] /get-user cevabı:', data);\n      const stats = data.stats || {};\n      const recentGames = stats.recentGames || [];\n      const totalScore = recentGames.reduce((sum, g) => sum + g.score, 0);\n      const avgScore = recentGames.length > 0 ? (totalScore / recentGames.length).toFixed(1) : \"0.0\";\n      setTotalGames(stats.totalGames || 0);\n      setWins(stats.wins || 0);\n      setLosses(stats.losses || 0);\n      setProfileImage(data.profileImage || DEFAULT_AVATAR);\n      setRecentGames(recentGames);\n      setAverageScore(parseFloat(avgScore));\n      if (data.profileImage) {\n        console.log('[Avatar] Sunucudan avatar geldi:', data.profileImage);\n        setProfileImage(data.profileImage);\n        sessionStorage.setItem(`profileImage_${username}`, data.profileImage);\n      } else {\n        const saved = sessionStorage.getItem(`profileImage_${username}`);\n        if (saved) {\n          console.log('[Avatar] sessionStorage avatarı kullanılıyor:', saved);\n          setProfileImage(saved);\n        } else {\n          console.log('[Avatar] Hiçbir şey yok, default atanıyor.');\n          setProfileImage(DEFAULT_AVATAR);\n        }\n      }\n    }).catch(err => {\n      console.error('İstatistik yükleme hatası:', err);\n    });\n  }, [username]);\n\n  //Oyun Sonunda İstatistik Güncelle\n  useEffect(() => {\n    if (gameOverData) {\n      setTotalGames(prev => prev + 1);\n      const playerScore = gameOverData.playerScore;\n      const opponentScore = gameOverData.opponentScore;\n      if (playerScore > opponentScore) {\n        setWins(prev => prev + 1);\n      } else if (playerScore < opponentScore) {\n        setLosses(prev => prev + 1);\n      }\n    }\n  }, [gameOverData]);\n\n  //GameOver Olursa Ekranı Değiştir\n  useEffect(() => {\n    if (gameOverData && currentScreen !== 'gameOver') {\n      setCurrentScreen('gameOver');\n    }\n  }, [gameOverData, currentScreen]);\n\n  //Zamanlayıcı Başlatma (turnData değişince)\n  useEffect(() => {\n    if (turnData) {\n      const {\n        turnStartTime,\n        turnDuration\n      } = turnData;\n      if (turnStartTime && turnDuration) {\n        const elapsed = Date.now() - turnStartTime;\n        const remaining = turnDuration - elapsed;\n        startTimer(Math.max(remaining, 0));\n      }\n    }\n  }, [turnData, startTimer]);\n\n  //Popup Açıldığında Accept Flag Sıfırla\n\n  useEffect(() => {\n    if (invitePopup.visible) {\n      setAcceptSent(false);\n    }\n  }, [invitePopup.visible]);\n  useEffect(() => {\n    if (invitePopup.visible) {\n      console.log(\"[DEBUG] Popup açıldı. username:\", username, \"from:\", invitePopup.from);\n\n      // Eğer kendinden gelen bir davetse, otomatik kapat\n      if (invitePopup.from === username) {\n        console.warn(\"[CLIENT] 🚫 Kendi gönderdiğim davet. Popup kapatılıyor.\");\n        setInvitePopup({\n          visible: false,\n          from: null\n        });\n      } else {\n        setAcceptSent(false); // sadece farklıysa sıfırla\n      }\n    }\n  }, [invitePopup.visible, invitePopup.from, username]);\n\n  //WebSocket Cleanup (componentWillUnmount gibi)\n  useEffect(() => {\n    return () => {\n      if (socketRef.current) socketRef.current.close();\n      if (reconnectTimeoutRef.current) clearTimeout(reconnectTimeoutRef.current);\n    };\n  }, []);\n  //Debug Loglar (En Alta)\n  useEffect(() => {\n    console.log('[DEBUG] gameOverData değişti:', gameOverData);\n  }, [gameOverData]);\n  useEffect(() => {\n    console.log('[DEBUG] recentGames state:', recentGames);\n    if (recentGames.length > 0) {\n      window.recentGames = recentGames;\n      console.log('🧪 recentGames window üzerinden erişilebilir hale geldi.');\n    }\n  }, [recentGames]);\n  const onGoogleLogin = () => {\n    if (!window.google || !window.google.accounts || !window.google.accounts.oauth2) {\n      console.error('❌ Google OAuth2 SDK tanımsız.');\n      return;\n    }\n    const client = window.google.accounts.oauth2.initTokenClient({\n      client_id: '743732871650-pbckifuebt6q7sm8vde172pvlsh5e3mp.apps.googleusercontent.com',\n      scope: 'openid email profile',\n      callback: response => {\n        if (!response || !response.access_token) {\n          console.error('❌ Token alınamadı.');\n          return;\n        }\n        const token = response.access_token;\n        fetch('/google-login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            token\n          }) // backend verifyIdToken ile değilse burayı ID token olarak güncelle\n        }).then(res => res.json()).then(data => {\n          if (data.success) {\n            console.log('✅ Giriş başarılı:', data.email);\n            // Giriş sonrası işlemler:\n            // setUsername(data.email.split('@')[0]);\n            // setCurrentScreen('start');\n          } else {\n            console.error('❌ Backend doğrulaması başarısız.');\n          }\n        }).catch(err => {\n          console.error('❌ Hata:', err);\n        });\n      }\n    });\n    client.requestAccessToken();\n  };\n  const handleCredentialResponse = response => {\n    const idToken = response.credential;\n    fetch('/google-login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        token: idToken\n      })\n    }).then(res => res.json()).then(data => {\n      if (data.success) {\n        console.log('✅ Giriş başarılı:', data.email);\n        // Burada kullanıcıyı oyuna alabilirsin:\n        // setUsername(data.email.split('@')[0]);\n        // setCurrentScreen('start');\n      } else {\n        console.error('❌ Token doğrulama başarısız.');\n      }\n    }).catch(err => {\n      console.error('❌ Hata:', err);\n    });\n  };\n  if (currentScreen === 'game') {\n    console.log('GameScreen props:', currentGame, gameOverData);\n  }\n  console.log('[App] render JSX return öncesi');\n  return /*#__PURE__*/_jsxDEV(SocketProvider, {\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [currentScreen === 'login' && /*#__PURE__*/_jsxDEV(LoginScreen, {\n        infoMessage: infoMessage,\n        onLogin: handleLogin,\n        onGoogleLogin: () => console.log('[App.js] Google login tıklanma testi'),\n        onFacebookLogin: () => console.log('[App.js] Facebook login tıklanma testi'),\n        onNavigateToRegister: () => setCurrentScreen('register')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 867,\n        columnNumber: 5\n      }, this), currentScreen === 'register' && /*#__PURE__*/_jsxDEV(RegisterScreen, {\n        onRegister: () => {\n          setInfoMessage('✅ Kayıt başarılı! Şimdi giriş yapabilirsin.');\n          setCurrentScreen('login');\n        },\n        onBackToLogin: () => setCurrentScreen('login')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 876,\n        columnNumber: 3\n      }, this), currentScreen === 'start' && /*#__PURE__*/_jsxDEV(StartScreen, {\n        setCurrentScreen: setCurrentScreen,\n        onRandomGame: () => {\n          console.log('[App.js] Rastgele eşleşme istendi');\n          if (statusMessage.includes('bekleniyor')) {\n            console.log('Zaten rakip bekleniyor.');\n            return;\n          }\n          const msg = {\n            type: 'startGame'\n          };\n          console.log('[WS SEND] Gönderilen mesaj:', msg);\n          socketRef.current.send(JSON.stringify(msg));\n        },\n        onInvite: targetUsername => {\n          console.log('[App.js] Davet gönderiliyor:', targetUsername);\n          const msg = {\n            type: 'invite',\n            to: targetUsername\n          };\n          console.log('[WS SEND] Gönderilen mesaj:', msg);\n          socketRef.current.send(JSON.stringify(msg));\n        },\n        onLogout: () => {\n          setGameOverData(null);\n          sessionStorage.removeItem('gameOverData');\n          setUsername('');\n          sessionStorage.removeItem('username');\n          sessionStorage.removeItem('currentScreen');\n          setCurrentScreen('login');\n        },\n        username: (userData === null || userData === void 0 ? void 0 : userData.username) || username,\n        profileImage: profileImage,\n        setProfileImage: setProfileImage,\n        onlineCount: onlineCount,\n        totalGames: totalGames,\n        winRate: calculatedWinRate,\n        averageScore: calculatedAverageScore,\n        wins: wins,\n        losses: losses,\n        onAvatarChange: handleAvatarChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 885,\n        columnNumber: 5\n      }, this), currentScreen === 'newMatch' && /*#__PURE__*/_jsxDEV(NewMatchScreen, {\n        onBack: () => setCurrentScreen('start'),\n        onRandomGame: () => {\n          const msg = {\n            type: 'startGame'\n          };\n          console.log('[Yeni Oyun] Rastgele rakip başlatılıyor, gönderilen mesaj:', msg);\n          socketRef.current.send(JSON.stringify(msg));\n        },\n        onInvite: targetUsername => {\n          const msg = {\n            type: 'invite',\n            to: targetUsername\n          };\n          console.log('[Yeni Oyun] Davet gönderiliyor, gönderilen mesaj:', msg);\n          socketRef.current.send(JSON.stringify(msg));\n        },\n        onComputerMatch: () => {\n          console.log('[Yeni Oyun] Bilgisayara karşı mod (placeholder)');\n          // İleride AI maçı eklenecekse burada handle edilecek\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 927,\n        columnNumber: 3\n      }, this), currentScreen === 'myGames' && /*#__PURE__*/_jsxDEV(MyGamesScreen, {\n        username: username,\n        setCurrentScreen: setCurrentScreen,\n        setGameOverData: setGameOverData,\n        setCurrentGame: setCurrentGame,\n        onJoinGame: joinGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 947,\n        columnNumber: 3\n      }, this), invitePopup.visible && /*#__PURE__*/_jsxDEV(InvitePopup, {\n        from: invitePopup.from,\n        onAccept: () => {\n          if (!acceptSent && invitePopup.from !== username) {\n            setAcceptSent(true);\n            const msg = {\n              type: 'acceptInvite'\n            };\n            console.log('[CLIENT] acceptInvite gönderiliyor:', msg);\n            socketRef.current.send(JSON.stringify(msg));\n          }\n          setInvitePopup({\n            visible: false,\n            from: null\n          });\n        },\n        onReject: () => {\n          const msg = {\n            type: 'rejectInvite'\n          };\n          console.log('[CLIENT] rejectInvite gönderiliyor:', msg);\n          socketRef.current.send(JSON.stringify(msg));\n          setInvitePopup({\n            visible: false,\n            from: null\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 960,\n        columnNumber: 5\n      }, this), currentScreen === 'game' && /*#__PURE__*/_jsxDEV(GameScreen, {\n        socket: socketRef.current,\n        turnData: turnData,\n        scores: scores,\n        board: board,\n        setBoard: setBoard,\n        gameId: gameId,\n        statusMessage: statusMessage,\n        gameEnded: false,\n        showGameOver: showGameOver,\n        gameOverData: gameOverData,\n        confirmDisabled: confirmDisabled,\n        setConfirmDisabled: setConfirmDisabled,\n        rematchPending: rematchPending,\n        setRematchPending: setRematchPending,\n        username: username,\n        profileImage: profileImage,\n        opponentImage: opponentImage,\n        opponentUsername: opponentUsername,\n        onGameOver: data => {\n          setGameOverData(data);\n          setCurrentScreen('gameOver');\n        },\n        setCurrentScreen: setCurrentScreen,\n        isReconnect: isReconnect\n      }, gameId || 'default', false, {\n        fileName: _jsxFileName,\n        lineNumber: 981,\n        columnNumber: 5\n      }, this), currentScreen === 'gameOver' && (gameOverData || currentGame) && /*#__PURE__*/_jsxDEV(GameOverScreen, {\n        data: gameOverData || currentGame,\n        username: username,\n        onExit: () => {\n          console.log('[CLIENT] exitGame mesajı gönderiliyor...');\n          if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\n            const msg = {\n              type: 'exitGame'\n            };\n            console.log('[CLIENT] exitGame mesajı gönderiliyor:', msg);\n            socketRef.current.send(JSON.stringify(msg));\n          }\n          resetGameState();\n          setGameOverData(null);\n          sessionStorage.removeItem('currentScreen');\n          sessionStorage.removeItem('gameOverData');\n          setCurrentScreen('start');\n        },\n        onRematch: opponentUsername => {\n          console.log('[CLIENT] Rematch isteği gönderiliyor:', opponentUsername);\n          socketRef.current.send(JSON.stringify({\n            type: 'invite',\n            to: opponentUsername,\n            fromRematch: true\n          }));\n          setRematchPending(true);\n        },\n        rematchPending: rematchPending,\n        setRematchPending: setRematchPending\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1010,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 864,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"Eeo6hEP0Jg2BRDMIe3JukA2bovc=\", false, function () {\n  return [useTimer];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useRef","useState","SocketProvider","LoginScreen","RegisterScreen","StartScreen","MyGamesScreen","NewMatchScreen","GameScreen","GameOverScreen","InvitePopup","useTimer","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","window","addEventListener","event","console","error","reason","username","setUsername","sessionStorage","getItem","userData","setUserData","loginError","setLoginError","DEFAULT_AVATAR","profileImage","setProfileImage","saved","infoMessage","setInfoMessage","currentGame","setCurrentGame","currentScreen","setCurrentScreen","savedGameOverData","validScreens","warn","includes","gameKey","setGameKey","board","setBoard","Array","fill","map","turnData","setTurnData","scores","setScores","myScore","opponentScore","isMyTurn","setIsMyTurn","letterToPlace","setLetterToPlace","confirmDisabled","setConfirmDisabled","enteredLetter","setEnteredLetter","tempPosition","setTempPosition","selectedCell","setSelectedCell","selectedLetter","setSelectedLetter","statusMessage","setStatusMessage","message","setMessage","gameEnded","setGameEnded","gameId","setGameId","isReconnect","setIsReconnect","activeGamesState","_setActiveGamesState","setActiveGames","data","log","Error","stack","gameOverData","setGameOverData","savedGameOver","JSON","parse","e","showGameOver","setShowGameOver","rematchPending","setRematchPending","acceptSent","setAcceptSent","opponentUsername","setOpponentUsername","opponentImage","setOpponentImage","lastOpponentUsername","setLastOpponentUsername","totalGames","setTotalGames","parseInt","wins","setWins","losses","setLosses","averageScore","setAverageScore","recentGames","setRecentGames","invitePopup","setInvitePopup","visible","from","onlineCount","setOnlineCount","socketRef","reconnectAttemptsRef","reconnectTimeoutRef","MAX_RECONNECT_ATTEMPTS","timer","startTimer","stopTimer","calculatedWinRate","Math","round","formatScore","value","num","parseFloat","toFixed","calculatedAverageScore","length","reduce","sum","g","score","handleAvatarChange","imgUrl","setItem","current","readyState","WebSocket","OPEN","send","stringify","type","handleLogin","u","p","password","joinGame","game","_game$yourTurn","yourTurn","resetGameState","removeItem","prevKey","handleRematch","to","fromRematch","safeSend","fetchActiveGames","fetch","encodeURIComponent","then","res","ok","status","json","gamesList","isArray","activeGames","filter","catch","err","initializeWebSocket","socket","onopen","storedUsername","storedGameId","onmessage","_data$winRate","_data$averageScore","_data$wins","_data$losses","_data","_data2","_data$yourTurn","_data$letterToPlace","_data$turnStartTime","_data$turnDuration","_data$letterToPlace2","_data$letterToPlace3","_data$playerScore","_data$opponentScore","lowerUsername","toLowerCase","winRate","setTimeout","count","turnStartTime","turnDuration","reconnect","invite","isMyTurnNow","currentPlayer","remainingTime","remainingSeconds","floor","letter","playerScore","currentUsername","won","playerDetails","opponentDetails","playerBoardHTML","opponentBoardHTML","onclose","delay","pow","onerror","savedScreen","savedUsername","stats","totalScore","avgScore","prev","elapsed","Date","now","remaining","max","close","clearTimeout","onGoogleLogin","google","accounts","oauth2","client","initTokenClient","client_id","scope","callback","response","access_token","token","method","headers","body","success","email","requestAccessToken","handleCredentialResponse","idToken","credential","children","onLogin","onFacebookLogin","onNavigateToRegister","fileName","_jsxFileName","lineNumber","columnNumber","onRegister","onBackToLogin","onRandomGame","msg","onInvite","targetUsername","onLogout","onAvatarChange","onBack","onComputerMatch","onJoinGame","onAccept","onReject","onGameOver","onExit","onRematch","_c","$RefreshReg$"],"sources":["C:/Users/dogan/Desktop/Kelimo-24092025/src/App.js"],"sourcesContent":["// 📁 components/App.jsx\r\nimport { useEffect, useRef, useState } from 'react';\r\n\r\n// Context\r\nimport { SocketProvider } from './context/SocketContext';\r\n\r\n// Screens\r\nimport LoginScreen from './components/LoginScreen';\r\nimport RegisterScreen from './components/RegisterScreen';\r\nimport StartScreen from './components/StartScreen';\r\nimport MyGamesScreen from './components/MyGamesScreen';\r\nimport NewMatchScreen from './components/NewMatchScreen';\r\nimport GameScreen from './components/GameScreen';\r\nimport GameOverScreen from './components/GameOverScreen';\r\n\r\n// Popups\r\nimport InvitePopup from './components/InvitePopup';\r\n\r\n// Hooks / Utils\r\nimport { useTimer } from './hooks/useTimer';\r\n\r\nexport default function App() {\r\nwindow.addEventListener('error', (event) => {\r\n  console.error('Global error:', event.error);\r\n});\r\n\r\nwindow.addEventListener('unhandledrejection', (event) => {\r\n  console.error('Unhandled promise rejection:', event.reason);\r\n});\r\n\r\n//Kullanıcı Bilgileri ve Giriş\r\nconst [username, setUsername] = useState(() => {\r\n  return sessionStorage.getItem('username') || '';\r\n});\r\nconst [userData, setUserData] = useState(null);\r\nconst [loginError, setLoginError] = useState('');\r\n// Sabitler\r\nconst DEFAULT_AVATAR = 'https://ui-avatars.com/api/?name=Anon&background=random&bold=true';\r\n//Kullanıcı Bilgileri devam\r\nconst [profileImage, setProfileImage] = useState(() => {\r\n  const saved = sessionStorage.getItem(`profileImage_${username}`);\r\n  return saved || DEFAULT_AVATAR;\r\n});\r\nconst [infoMessage, setInfoMessage] = useState('');\r\n//Ekran ve geçiş yönetimi\r\nconst [currentGame, setCurrentGame] = useState(null);\r\nconst [currentScreen, setCurrentScreen] = useState(() => {\r\n  const saved = sessionStorage.getItem('currentScreen');\r\n  const savedGameOverData = sessionStorage.getItem('gameOverData');\r\n  const validScreens = ['login', 'register', 'start', 'game', 'gameOver', 'newMatch', 'myGames'];\r\n\r\n  if (saved === 'game' && savedGameOverData) {\r\n    console.warn('[INIT] Oyun bitmişti, gameOver ekranına dönülüyor.');\r\n    return 'gameOver';\r\n  }\r\n\r\n  return validScreens.includes(saved) ? saved : 'login';\r\n});\r\nconst [gameKey, setGameKey] = useState(0);\r\n\r\n//Oyun verileri\r\nconst [board, setBoard] = useState(Array(5).fill(null).map(() => Array(5).fill('')));\r\nconst [turnData, setTurnData] = useState(null);\r\nconst [scores, setScores] = useState({ myScore: 0, opponentScore: 0 });\r\nconst [isMyTurn, setIsMyTurn] = useState(false);\r\nconst [letterToPlace, setLetterToPlace] = useState(null);\r\nconst [confirmDisabled, setConfirmDisabled] = useState(false);\r\nconst [enteredLetter, setEnteredLetter] = useState(''); \r\nconst [tempPosition, setTempPosition] = useState(null); \r\nconst [selectedCell, setSelectedCell] = useState(null);\r\nconst [selectedLetter, setSelectedLetter] = useState(null);\r\nconst [statusMessage, setStatusMessage] = useState('');\r\nconst [message, setMessage] = useState(''); \r\nconst [gameEnded, setGameEnded] = useState(false);\r\nconst [gameId, setGameId] = useState(null);\r\nconst [isReconnect, setIsReconnect] = useState(false);\r\nconst [activeGamesState, _setActiveGamesState] = useState([]);\r\n\r\nconst setActiveGames = (data) => {\r\n  console.log('[GLOBAL SET activeGames] çağrısı, stack:', new Error().stack);\r\n  console.log('[GLOBAL SET activeGames] data:', data);\r\n  _setActiveGamesState(data);\r\n};\r\n\r\n\r\n// Oyun sonu\r\nconst [gameOverData, setGameOverData] = useState(() => {\r\n  let savedGameOver = null;\r\n  try {\r\n    const saved = sessionStorage.getItem('gameOverData');\r\n    savedGameOver = saved ? JSON.parse(saved) : null;\r\n  } catch (e) {\r\n    console.warn('[WARN] Bozuk gameOverData JSON:', e);\r\n    savedGameOver = null;\r\n  }\r\n  return savedGameOver;\r\n});\r\nconst [showGameOver, setShowGameOver] = useState(false);\r\nconst [rematchPending, setRematchPending] = useState(false);\r\nconst [acceptSent, setAcceptSent] = useState(false);\r\n\r\n//Rakip verileri\r\nconst [opponentUsername, setOpponentUsername] = useState('');\r\nconst [opponentImage, setOpponentImage] = useState('');\r\nconst [lastOpponentUsername, setLastOpponentUsername] = useState('');\r\n\r\n//İstatistik ve Geçmiş\r\nconst [totalGames, setTotalGames] = useState(() => {\r\nconst saved = sessionStorage.getItem('totalGames');\r\n  return saved ? parseInt(saved, 10) : 0;\r\n});\r\nconst [wins, setWins] = useState(() => {\r\n  const saved = sessionStorage.getItem('wins');\r\n  return saved ? parseInt(saved, 10) : 0;\r\n});\r\nconst [losses, setLosses] = useState(() => {\r\n  const saved = sessionStorage.getItem('losses');\r\n  return saved ? parseInt(saved, 10) : 0;\r\n});\r\nconst [averageScore, setAverageScore] = useState(0);\r\nconst [recentGames, setRecentGames] = useState([]);\r\n\r\n//Davet\r\nconst [invitePopup, setInvitePopup] = useState({ visible: false, from: null });\r\n\r\n//Sistem, Socket ve Bağlantı\r\nconst [onlineCount, setOnlineCount] = useState(0);\r\nconst socketRef = useRef(null);\r\nconst reconnectAttemptsRef = useRef(0);\r\nconst reconnectTimeoutRef = useRef(null);\r\nconst MAX_RECONNECT_ATTEMPTS = 5;\r\n\r\n//Zamanlayıcı Sistemi\r\nconst { timer, startTimer, stopTimer } = useTimer();\r\n\r\nconst calculatedWinRate = totalGames > 0 ? Math.round((wins / totalGames) * 100) : 0;\r\n\r\nconst formatScore = (value) => {\r\n  const num = parseFloat(value);\r\n  return num % 1 === 0 ? num.toFixed(0) : num.toFixed(1);\r\n};\r\n\r\nconst calculatedAverageScore = recentGames.length > 0\r\n  ? formatScore(recentGames.reduce((sum, g) => sum + (g.score || 0), 0) / recentGames.length)\r\n  : \"0.0\";\r\n\r\n// 👤 Profil / Avatar işlemleri\r\nfunction handleAvatarChange(imgUrl) {\r\n  setProfileImage(imgUrl);\r\n  sessionStorage.setItem(`profileImage_${username}`, imgUrl);\r\n\r\n  if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\r\n    console.log('[WS SEND] updateProfileImage', { profileImage: imgUrl });\r\n\r\n    socketRef.current.send(JSON.stringify({\r\n      type: 'updateProfileImage',\r\n      profileImage: imgUrl,\r\n    }));\r\n  }\r\n}\r\n\r\n// 🔐 Kullanıcı login işlemi\r\nfunction handleLogin(u, p) {\r\n  if (!socketRef.current || socketRef.current.readyState !== 1) {\r\n    console.warn('WebSocket bağlantısı henüz hazır değil.');\r\n    return;\r\n  }\r\n  console.log('[App.js] onLogin çağrılıyor, gönderilen veri:', {\r\n  type: 'login',\r\n  username: u,\r\n  password: p,\r\n  isReconnect: false\r\n});\r\n\r\n  console.log('[App.js] onLogin çağrıldı:', u, p);\r\n  setUsername(u);\r\n  sessionStorage.setItem('username', u);\r\n  socketRef.current.send(JSON.stringify({\r\n  type: 'login',\r\n  username: u,\r\n  password: p,\r\n  isReconnect: false // 🔐 manuel giriş → reconnect değil\r\n}));\r\n}\r\nfunction joinGame(game) {\r\n  if (!game) {\r\n    console.warn('[WARN] joinGame null veya undefined game aldı');\r\n    return; // game yoksa fonksiyon burada durur\r\n  }\r\n\r\n  console.log('[App.js] joinGame çağrıldı:', game.gameId);\r\n\r\n  if (socketRef.current && socketRef.current.readyState === 1) {\r\n    console.log('[App.js] socketRef.current.readyState:', socketRef.current.readyState);\r\n\r\n    console.log('[CLIENT][JOIN] joinGame mesajı gönderiliyor:', game.gameId);\r\n    \r\n    socketRef.current.send(JSON.stringify({\r\n      type: 'joinGame',\r\n      gameId: game.gameId\r\n    }));\r\n    console.log('[joinGame] game objesi içeriği:', game);\r\n\r\n    setCurrentGame({\r\n      gameId: game.gameId || null,\r\n      opponentUsername: game.opponentUsername || '',\r\n      opponentImage: game.opponentImage || DEFAULT_AVATAR,\r\n      yourTurn: game.yourTurn ?? false,\r\n    });\r\n    \r\n  } else {\r\n    console.warn('WebSocket bağlı değil.');\r\n  }\r\n}\r\n\r\n// ♻️ Oyun sıfırlama\r\nconst resetGameState = () => {\r\n  console.log('--- resetGameState başlatıldı ---');\r\n  setBoard(Array(5).fill(null).map(() => Array(5).fill('')));\r\n  setScores({ myScore: 0, opponentScore: 0 });\r\n  setTurnData(null);\r\n  setGameEnded(false);\r\n  setGameOverData(null);\r\n  setLetterToPlace(null);\r\n  setStatusMessage('');\r\n  setConfirmDisabled(false);\r\n  setEnteredLetter('');\r\n  setTempPosition(null);\r\n  setSelectedCell(null);\r\nsetSelectedLetter(null);\r\nsetLastOpponentUsername('');\r\nsessionStorage.removeItem('gameOverData');\r\n\r\n  setMessage('');\r\n  setIsMyTurn(false);\r\n  setGameKey(prevKey => prevKey + 1); // Her sıfırlamada key'i artır\r\n        console.log(`GameScreen key güncellendi: ${gameKey + 1}`);\r\n};\r\n\r\n// 🔁 Rematch\r\nconst handleRematch = (opponentUsername) => {\r\n  if (!opponentUsername) {\r\n    console.warn('[WARN] opponentUsername bilinmiyor, rematch gönderilemez.');\r\n    return;\r\n  }\r\n\r\n  console.log('[DEBUG] Rematch isteği gönderiliyor:', opponentUsername);\r\n\r\n  socketRef.current.send(JSON.stringify({\r\n    type: 'invite',\r\n    to: opponentUsername,\r\n    fromRematch: true\r\n  }));\r\n\r\n  setRematchPending(true); // ✅ App.js içinde tanımlı olan state\r\n};\r\nfunction safeSend(message) {\r\n  if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\r\n    console.log('[WS SEND] Gönderilen mesaj:', message);\r\n    socketRef.current.send(JSON.stringify(message));\r\n  } else {\r\n    console.warn('WebSocket bağlantısı açık değil, mesaj gönderilemiyor:', message);\r\n    // Burada istersen mesajı bir kuyrukta tutup bağlantı açılınca gönderebilirsin\r\n  }\r\n}\r\nfunction fetchActiveGames() {\r\n  debugger; // <-- BURAYA\r\n  fetch(`/get-active-games?username=${encodeURIComponent(username)}`)\r\n    .then(res => {\r\n      if (!res.ok) { // Yanıt başarılı değilse\r\n        throw new Error(`HTTP hatası! Status: ${res.status}`);\r\n      }\r\n      return res.json();\r\n    })\r\n    .then(data => {\r\n      // Eğer backend doğrudan dizi döndürüyorsa:\r\n      // const gamesList = Array.isArray(data) ? data : data.activeGames || [];\r\n      // Sonra filtrele\r\n      const gamesList = (data && Array.isArray(data.activeGames) ? data.activeGames : Array.isArray(data) ? data : []);\r\n      setActiveGames(gamesList.filter(g => g.status === 'ongoing'));\r\n    })\r\n    .catch(err => console.error('Aktif oyunlar alınamadı:', err));\r\n}\r\n\r\n// 🌐 WebSocket bağlantısını başlat\r\nfunction initializeWebSocket() {\r\n  debugger; // <-- Buraya ekleyin\r\n const socket = new WebSocket('ws://localhost:3001');\r\n  socketRef.current = socket;\r\n\r\n  socket.onopen = () => {\r\n    \r\n    console.log('✅ WebSocket bağlantısı kuruldu.');\r\n  reconnectAttemptsRef.current = 0;\r\n  const storedUsername = sessionStorage.getItem('username');\r\n  if (storedUsername) {\r\n    console.log('[Reconnect] Otomatik login atılıyor:', storedUsername);\r\n    const storedGameId = sessionStorage.getItem('gameId');\r\n    safeSend({  // veya socket.send(...) — hangisini kullanıyorsan\r\n      type: 'login',\r\n      username: storedUsername,\r\n      isReconnect: true,\r\n      gameId: storedGameId || null\r\n    });\r\n  }\r\n};\r\nsocket.onmessage = (event) => {\r\n  console.log('[WS] Gelen ham veri:', event.data);\r\nif (!event.data) {\r\n    console.warn('[WS] Boş mesaj geldi, işlenmiyor.');\r\n    return;\r\n  }  \r\nlet data;\r\ntry {\r\n  data = JSON.parse(event.data);\r\n} catch (e) {\r\n  console.error('[WS] JSON parse hatası, gelen ham veri:', event.data);\r\n  return;\r\n}\r\n if (!data.type) {\r\n    console.warn('[WS] Tipi olmayan mesaj alındı:', data);\r\n    return;\r\n  }\r\n\r\n\r\n// 🔍 Tüm gelen mesajı logla\r\n  console.log('[WS] Gelen mesaj:', data);\r\n\r\n  // Eğer JSON-RPC hatası varsa\r\n  try {\r\n  if (data.error) {\r\n    console.error('[WS] JSON-RPC Hatası:', data.error);\r\n  }\r\n} catch (err) {\r\n  console.error('[WS] Error loglanırken patladı:', err);\r\n}\r\n\r\nswitch (data.type) {\r\n\r\n  case 'loginSuccess':\r\n  console.log('loginSuccess alındı, startScreen açılıyor...');\r\n  const lowerUsername = data.username.toLowerCase();\r\n  setUsername(lowerUsername);\r\n  console.log('[DEBUG] setUsername loginSuccess ile çağrıldı:', lowerUsername);\r\n  sessionStorage.setItem('username', lowerUsername); // yeni satır\r\n\r\n  setUserData({\r\n    username: lowerUsername,\r\n    winRate: data.winRate ?? 0,\r\n    averageScore: data.averageScore ?? 0,\r\n    wins: data.wins ?? 0,\r\n    losses: data.losses ?? 0\r\n  });\r\n\r\nconst gamesList = Array.isArray(data.activeGames) ? data.activeGames : [];\r\nsetActiveGames(gamesList.filter(g => g?.status === 'ongoing'));\r\n\r\n  setCurrentScreen('start');\r\n  break;\r\n\r\n  case 'loginFailure':\r\nsetLoginError(data.message || 'Geçersiz kullanıcı adı veya şifre.');\r\nbreak;\r\ncase 'setUsernameAck':\r\nconsole.log(\"✅ Kullanıcı adı sunucu tarafından onaylandı.\");\r\nbreak;\r\ncase 'status':\r\n  console.log('[App.js] Status mesajı:', data.message);\r\n  setStatusMessage(data.message);\r\n  break;\r\ncase 'invite':\r\n  console.log('[CLIENT DEBUG] Gelen davet kimden:', data.from);\r\n  console.log('[CLIENT DEBUG] Benim kullanıcı adım:', username);\r\n\r\n  if (!data.from) {\r\n    console.warn('[CLIENT] 🚫 Gelen davet geçersiz, gönderici yok.');\r\n    return;\r\n  }\r\n\r\n  \r\n  if (!username) {\r\n    console.warn('[CLIENT] ⚠️ Kullanıcı adı henüz gelmemiş, davet işlenemedi. Bekletiliyor...');\r\n    setTimeout(() => {\r\n      if (data.from !== username) {\r\n        console.log('[CLIENT] 🔁 Bekletilen davet şimdi işleniyor.');\r\n        setInvitePopup({ visible: true, from: data.from });\r\n      } else {\r\n        console.log('[CLIENT] ⛔ Bekletilen davet kendinden geldi, işlenmedi.');\r\n      }\r\n    }, 100);\r\n    return;\r\n  }\r\n\r\n  if (data.from === username) {\r\n    console.warn('[CLIENT] 🚫 Kendi gönderdiğim davet, işlenmeyecek.');\r\n    return;\r\n  }\r\n\r\n  console.log('[App.js] ✅ Davet geldi, popup açılıyor:', data);\r\n  setInvitePopup({ visible: true, from: data.from });\r\n  break;\r\ncase 'onlineCount':\r\nconsole.log('[WS] 🔢 Online kullanıcı sayısı mesajı alındı:', data.count);\r\nsetOnlineCount(data.count);\r\nconsole.log('[App.js] 🔢 Online kullanıcı sayısı (state sonrası):', data.count);\r\nbreak;\r\n\r\ncase 'start':\r\n  console.log('[CLIENT] Yeni gameId alındı:', data.gameId); // <== BURAYA\r\n  console.log('[CLIENT][RECONNECT] start mesajı geldi');\r\n  console.log('[CLIENT][RECONNECT] yourTurn:', data.yourTurn);\r\n  console.log('[CLIENT][RECONNECT] letterToPlace:', data.letterToPlace);\r\n\r\n  console.log('[CLIENT][START] Gelen start verisi:', JSON.stringify(data, null, 2)); \r\n\r\n  if (data.gameId) {\r\n    setGameId(data.gameId); // ✅ burada state'e yazılıyor\r\n    sessionStorage.setItem('gameId', data.gameId);\r\n  }\r\n\r\n  if (!(gameOverData && currentScreen === 'gameOver')) {\r\n    if (currentScreen !== 'game') {\r\n      console.log('[TRACE] setCurrentScreen(\"game\") çağrıldı — DOSYA içinde tam yer: X satırı');\r\n\r\n      setCurrentScreen('game');\r\n    }\r\n  }\r\n\r\n  setOpponentImage(data?.opponentImage || DEFAULT_AVATAR);\r\n  setOpponentUsername(data?.opponentUsername || '');\r\n  \r\n  setCurrentGame({\r\n    gameId: data.gameId || null,\r\n    opponentUsername: data.opponentUsername || '',\r\n    opponentImage: data.opponentImage || DEFAULT_AVATAR,\r\n    yourTurn: data.yourTurn ?? false,\r\n    letterToPlace: data.letterToPlace ?? null,\r\n    turnStartTime: data.turnStartTime ?? null,\r\n    turnDuration: data.turnDuration ?? null\r\n  });\r\n  \r\n  const reconnect = !data.invite && !data.fromRematch;\r\n  console.log('[CLIENT][APP] reconnect değeri:', reconnect);\r\n  setIsReconnect(reconnect);\r\n\r\n  if (!reconnect) {\r\n    resetGameState();\r\n  }\r\n  \r\n  setLetterToPlace(data.letterToPlace ?? null);\r\n  setTurnData({\r\n  letterToPlace: data.letterToPlace ?? null,\r\n  turnStartTime: data.turnStartTime,\r\n  turnDuration: data.turnDuration,\r\n});\r\n\r\n  break;\r\n\r\ncase 'boardState':\r\n  setBoard(data.board);\r\n  break;\r\n\r\ncase 'turn':\r\n  console.log('[CLIENT] Gelen turn mesajı:', data);\r\n  if (gameOverData) {\r\n    console.log('[turn] Oyun bitti, turn mesajı yoksayılıyor.');\r\n    break;\r\n  }\r\n  setTurnData(data);\r\n  console.log('[TRACE] setCurrentScreen(\"game\") çağrıldı — DOSYA içinde tam yer: X satırı');\r\n\r\n  setCurrentScreen('game');\r\n  \r\n  const isMyTurnNow = data.currentPlayer === username;\r\nconsole.log('[CLIENT] Hesaplanan yourTurn:', isMyTurnNow);\r\nsetIsMyTurn(isMyTurnNow);\r\n\r\n\r\n\r\n  if (typeof data.remainingTime === 'number' && data.yourTurn === true) {\r\n\r\n    const remainingSeconds = Math.floor(data.remainingTime / 1000);\r\n    console.log('[CLIENT] ⏱ Timer başlatılıyor (zorla):', remainingSeconds);\r\n    startTimer(remainingSeconds);\r\n  }\r\n  break;\r\n\r\n  case 'promptOwnLetter':\r\n  setMessage('Rakibin harfi yerleştirildi. Şimdi kendi harfini gir.');\r\n  break;\r\n\r\ncase 'promptOpponentLetter':\r\n  setLetterToPlace(data.letter);\r\n  setStatusMessage(`Rakip harfi \"${data.letter}\" geldi. Yerleştirmek için bir hücre seç.`);\r\n  break;\r\n\r\ncase 'opponentPlacedLetter':\r\n  setStatusMessage(`Rakip oyuncu \"${data.letter}\" harfini gönderdi. Yerleştirmeni bekliyor.`);\r\n  setLetterToPlace(data.letter);\r\n  break;\r\n\r\ncase 'updateScores':\r\n  setScores({\r\n    myScore: data.playerScore,\r\n    opponentScore: data.opponentScore\r\n  });\r\n  break;\r\ncase 'gameOver':\r\n  console.log('[CLIENT][DEBUG] gameOver mesajı alındı. Gelen data:', data); \r\n  console.log('[CLIENT][DEBUG] data.opponentUsername:', data.opponentUsername); \r\n  \r\n  const currentUsername = userData?.username || username || sessionStorage.getItem('username') || '';\r\n  console.log('[DEBUG] reportScore gönderiliyor:', {\r\n    username: currentUsername,\r\n    score: data.playerScore,\r\n    won: data.playerScore > data.opponentScore\r\n  });\r\n\r\n\r\n  setGameEnded(true);\r\n  setStatusMessage('Oyun Bitti!');\r\n  setConfirmDisabled(true); // bu state varsa\r\n  setGameOverData({\r\n  playerScore: data.playerScore ?? 0,\r\n  opponentScore: data.opponentScore ?? 0,\r\n  playerDetails: data.playerDetails || {},\r\n  opponentDetails: data.opponentDetails || {},\r\n  playerBoardHTML: data.playerBoardHTML || '',\r\n  opponentBoardHTML: data.opponentBoardHTML || '',\r\n  opponentUsername: data.opponentUsername || '',\r\n  username: currentUsername\r\n  });\r\n  sessionStorage.setItem('gameOverData', JSON.stringify({\r\n  playerScore: data.playerScore,\r\n  opponentScore: data.opponentScore,\r\n  playerDetails: data.playerDetails,\r\n  opponentDetails: data.opponentDetails,\r\n  playerBoardHTML: data.playerBoardHTML,\r\n  opponentBoardHTML: data.opponentBoardHTML,\r\n  opponentUsername: data.opponentUsername,\r\n  username: currentUsername\r\n}));\r\n  setCurrentScreen('gameOver');  \r\n  setShowGameOver(true); // oyun sonu ekranını göster\r\n\r\n  \r\n  safeSend({\r\n    type: 'reportScore',\r\n    username: currentUsername,\r\n    score: data.playerScore,\r\n    won: data.playerScore > data.opponentScore\r\n  });\r\n  fetchActiveGames();\r\nbreak;\r\ncase 'rematchStart':\r\n  console.log('[CLIENT] rematchStart alındı.');\r\n  resetGameState();\r\n  setGameEnded(false);\r\n  setTurnData(null);\r\n  setGameOverData(null);\r\n  setBoard(Array(5).fill(null).map(() => Array(5).fill('')));\r\n  console.log('[TRACE] setCurrentScreen(\"game\") çağrıldı — DOSYA içinde tam yer: X satırı');\r\n\r\n  setCurrentScreen('game');\r\n  console.log('[CLIENT][DEBUG] Ekran \"game\" olarak ayarlandı. GameScreen yeniden yüklenecek.');\r\n  setEnteredLetter('');\r\n  setTempPosition(null);\r\n  setRematchPending(false);\r\n  setMessage('Yeni oyun başladı. Hamleni yap.');\r\n  setShowGameOver(false);\r\n  setOpponentUsername(data.opponentUsername);\r\n  setOpponentImage(data.opponentImage);\r\n  break;\r\n\r\n\r\ndefault:\r\nconsole.warn('[WS] Bilinmeyen mesaj tipi:', data.type);\r\n}\r\n};\r\n\r\nsocket.onclose = () => {\r\n    console.log('❌ WebSocket bağlantısı kapandı.');\r\n    setStatusMessage('Bağlantı kesildi, tekrar bağlanılıyor...');\r\n     if (reconnectAttemptsRef.current < MAX_RECONNECT_ATTEMPTS) {\r\n    const delay = 1000 * Math.pow(2, reconnectAttemptsRef.current ); // exponential backoff\r\n    console.log(`[Reconnect] ${delay}ms içinde yeniden bağlanacak...`);\r\n\r\n    reconnectTimeoutRef.current = setTimeout(() => {\r\n  reconnectAttemptsRef.current += 1;\r\n  initializeWebSocket(); // Tüm event handler'ları burada tanımladığın için yeniden çağır\r\n}, delay);\r\n\r\n  } else {\r\n    console.error('[Reconnect] Maksimum deneme sayısına ulaşıldı.');\r\n    setStatusMessage('Bağlantı kesildi. Lütfen sayfayı yenileyin.');\r\n    setGameEnded(true);\r\n  }\r\n};\r\n\r\nsocket.onerror = (err) => {\r\n      console.error('🔥 WebSocket hatası:', err);\r\n  setStatusMessage('Bir hata oluştu. Bağlantı sorunu olabilir.');\r\n  setGameEnded(true);\r\n};\r\n}\r\n\r\n//SessionStorage Kaydetme ve Okuma\r\nuseEffect(() => {\r\n  sessionStorage.setItem('currentScreen', currentScreen);\r\n}, [currentScreen]);\r\n\r\n\r\n\r\nuseEffect(() => {\r\n  if (username) {\r\n    sessionStorage.setItem(`profileImage_${username}`, profileImage);\r\n  }\r\n}, [profileImage, username]);\r\n\r\nuseEffect(() => {\r\n  sessionStorage.setItem('totalGames', totalGames);\r\n}, [totalGames]);\r\n\r\nuseEffect(() => {\r\n  sessionStorage.setItem('wins', wins);\r\n}, [wins]);\r\n\r\nuseEffect(() => {\r\n  sessionStorage.setItem('losses', losses);\r\n}, [losses]);\r\n\r\n//App Açılışında Session’dan Yükleme ve Yönlendirme\r\nuseEffect(() => {\r\n  const savedScreen = sessionStorage.getItem('currentScreen');\r\n  const savedUsername = sessionStorage.getItem('username');\r\n  const savedGameOverData = sessionStorage.getItem('gameOverData');\r\n\r\n  if (savedGameOverData && savedScreen === 'game') {\r\n    console.log('[SAFELOAD] Oyun bitmişti, gameOver ekranına dönülüyor.');\r\n    setCurrentScreen('gameOver');\r\n    return;\r\n  }\r\n\r\n  if (savedScreen === 'game') {\r\n    if (!savedUsername) {\r\n      console.warn('[SAFELOAD] Username yok, login ekranına dönülüyor.');\r\n      setCurrentScreen('login');\r\n    } else {\r\n      console.log('[SAFELOAD] Game ekranı yüklenecek. Username mevcut:', savedUsername);\r\n    }\r\n  } else if (savedScreen === 'start') {\r\n    if (!savedUsername) {\r\n      console.warn('[SAFELOAD] Start için username yok, login ekranına dönülüyor.');\r\n      setCurrentScreen('login');\r\n    } else {\r\n      setCurrentScreen('start');\r\n    }\r\n  }\r\n}, []);\r\n\r\n//Kullanıcı Verisi Fetch Etme\r\nuseEffect(() => {\r\n  console.log('[FETCH DEBUG] Kullanıcı istatistikleri yükleniyor:', username);\r\n  if (!username) return;\r\ndebugger; // BURAYA\r\n  fetch(`/get-user?username=${username}`)\r\n    .then(res => {\r\n      if (!res.ok) { // Yanıt başarılı değilse\r\n        throw new Error(`HTTP hatası! Status: ${res.status}`);\r\n      }\r\n      return res.json();\r\n    })\r\n    .then(data => {\r\n      console.log('[DEBUG] /get-user cevabı:', data);\r\n      const stats = data.stats || {};\r\n      const recentGames = stats.recentGames || [];\r\n  \r\n  const totalScore = recentGames.reduce((sum, g) => sum + g.score, 0);\r\n    const avgScore = recentGames.length > 0\r\n      ? (totalScore / recentGames.length).toFixed(1)\r\n      : \"0.0\";\r\n\r\n  setTotalGames(stats.totalGames || 0);\r\n  setWins(stats.wins || 0);\r\n  setLosses(stats.losses || 0);\r\n  setProfileImage(data.profileImage || DEFAULT_AVATAR);\r\n  setRecentGames(recentGames);\r\n  setAverageScore(parseFloat(avgScore));\r\n  \r\nif (data.profileImage) {\r\n        console.log('[Avatar] Sunucudan avatar geldi:', data.profileImage);\r\n        setProfileImage(data.profileImage);\r\n        sessionStorage.setItem(`profileImage_${username}`, data.profileImage);\r\n      } else {\r\n        const saved = sessionStorage.getItem(`profileImage_${username}`);\r\n        if (saved) {\r\n          console.log('[Avatar] sessionStorage avatarı kullanılıyor:', saved);\r\n          setProfileImage(saved);\r\n        } else {\r\n          console.log('[Avatar] Hiçbir şey yok, default atanıyor.');\r\n          setProfileImage(DEFAULT_AVATAR);\r\n        }\r\n      }\r\n\r\n    })\r\n    .catch(err => {\r\n      console.error('İstatistik yükleme hatası:', err);\r\n    });\r\n}, [username]);\r\n\r\n\r\n\r\n//Oyun Sonunda İstatistik Güncelle\r\nuseEffect(() => {\r\n  if (gameOverData) {\r\n    setTotalGames(prev => prev + 1);\r\n\r\n    const playerScore = gameOverData.playerScore;\r\n    const opponentScore = gameOverData.opponentScore;\r\n\r\n    if (playerScore > opponentScore) {\r\n      setWins(prev => prev + 1);\r\n    } else if (playerScore < opponentScore) {\r\n      setLosses(prev => prev + 1);\r\n    }\r\n  }\r\n}, [gameOverData]);\r\n\r\n//GameOver Olursa Ekranı Değiştir\r\nuseEffect(() => {\r\n    if (gameOverData && currentScreen !== 'gameOver') {\r\n      setCurrentScreen('gameOver');\r\n    }\r\n  }, [gameOverData, currentScreen]);\r\n\r\n//Zamanlayıcı Başlatma (turnData değişince)\r\nuseEffect(() => {\r\n  if (turnData) {\r\n    const { turnStartTime, turnDuration } = turnData;\r\n    if (turnStartTime && turnDuration) {\r\n      const elapsed = Date.now() - turnStartTime;\r\n      const remaining = turnDuration - elapsed;\r\n      startTimer(Math.max(remaining, 0)); \r\n    }\r\n  }\r\n}, [turnData, startTimer]);\r\n\r\n//Popup Açıldığında Accept Flag Sıfırla\r\n\r\nuseEffect(() => {\r\n    if (invitePopup.visible) {\r\n      setAcceptSent(false); \r\n    }\r\n  }, [invitePopup.visible]);\r\n\r\n\r\nuseEffect(() => {\r\n  if (invitePopup.visible) {\r\n    console.log(\"[DEBUG] Popup açıldı. username:\", username, \"from:\", invitePopup.from);\r\n\r\n    // Eğer kendinden gelen bir davetse, otomatik kapat\r\n    if (invitePopup.from === username) {\r\n      console.warn(\"[CLIENT] 🚫 Kendi gönderdiğim davet. Popup kapatılıyor.\");\r\n      setInvitePopup({ visible: false, from: null });\r\n    } else {\r\n      setAcceptSent(false); // sadece farklıysa sıfırla\r\n    }\r\n  }\r\n}, [invitePopup.visible, invitePopup.from, username]);\r\n\r\n//WebSocket Cleanup (componentWillUnmount gibi)\r\nuseEffect(() => {\r\nreturn () => {\r\n  if (socketRef.current) socketRef.current.close();\r\n  if (reconnectTimeoutRef.current) clearTimeout(reconnectTimeoutRef.current);\r\n};\r\n}, []);\r\n//Debug Loglar (En Alta)\r\nuseEffect(() => {\r\n    console.log('[DEBUG] gameOverData değişti:', gameOverData);\r\n  }, [gameOverData]);\r\n\r\nuseEffect(() => {\r\n  console.log('[DEBUG] recentGames state:', recentGames);\r\n  if (recentGames.length > 0) {\r\n    window.recentGames = recentGames;\r\n    console.log('🧪 recentGames window üzerinden erişilebilir hale geldi.');\r\n  }\r\n}, [recentGames]);\r\n\r\nconst onGoogleLogin = () => {\r\n  if (!window.google || !window.google.accounts || !window.google.accounts.oauth2) {\r\n    console.error('❌ Google OAuth2 SDK tanımsız.');\r\n    return;\r\n  }\r\n\r\n  const client = window.google.accounts.oauth2.initTokenClient({\r\n    client_id: '743732871650-pbckifuebt6q7sm8vde172pvlsh5e3mp.apps.googleusercontent.com',\r\n    scope: 'openid email profile',\r\n    callback: (response) => {\r\n      if (!response || !response.access_token) {\r\n        console.error('❌ Token alınamadı.');\r\n        return;\r\n      }\r\n\r\n      const token = response.access_token;\r\n\r\n      fetch('/google-login', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ token }), // backend verifyIdToken ile değilse burayı ID token olarak güncelle\r\n      })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          if (data.success) {\r\n            console.log('✅ Giriş başarılı:', data.email);\r\n            // Giriş sonrası işlemler:\r\n            // setUsername(data.email.split('@')[0]);\r\n            // setCurrentScreen('start');\r\n          } else {\r\n            console.error('❌ Backend doğrulaması başarısız.');\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.error('❌ Hata:', err);\r\n        });\r\n    }\r\n  });\r\n\r\n  client.requestAccessToken();\r\n};\r\n\r\n\r\n  const handleCredentialResponse = (response) => {\r\n    const idToken = response.credential;\r\n\r\n    fetch('/google-login', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ token: idToken }),\r\n    })\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        if (data.success) {\r\n          console.log('✅ Giriş başarılı:', data.email);\r\n          // Burada kullanıcıyı oyuna alabilirsin:\r\n          // setUsername(data.email.split('@')[0]);\r\n          // setCurrentScreen('start');\r\n        } else {\r\n          console.error('❌ Token doğrulama başarısız.');\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.error('❌ Hata:', err);\r\n      });\r\n  };\r\nif (currentScreen === 'game') {\r\n  console.log('GameScreen props:', currentGame, gameOverData);\r\n}\r\n\r\n console.log('[App] render JSX return öncesi');\r\n\r\nreturn (\r\n  <SocketProvider>\r\n  <>\r\n  {currentScreen === 'login' && (\r\n    <LoginScreen\r\n      infoMessage={infoMessage}\r\n      onLogin={handleLogin}\r\n      onGoogleLogin={() => console.log('[App.js] Google login tıklanma testi')}\r\n      onFacebookLogin={() => console.log('[App.js] Facebook login tıklanma testi')}\r\n      onNavigateToRegister={() => setCurrentScreen('register')} \r\n    />\r\n  )}\r\n  {currentScreen === 'register' && (\r\n  <RegisterScreen\r\n    onRegister={() => {\r\n      setInfoMessage('✅ Kayıt başarılı! Şimdi giriş yapabilirsin.');\r\n      setCurrentScreen('login');\r\n  }}\r\n  onBackToLogin={() => setCurrentScreen('login')}\r\n  />\r\n)}\r\n  {currentScreen === 'start' && (\r\n    <StartScreen\r\n    setCurrentScreen={setCurrentScreen}\r\n  onRandomGame={() => {\r\n  console.log('[App.js] Rastgele eşleşme istendi');\r\n  if (statusMessage.includes('bekleniyor')) {\r\n  console.log('Zaten rakip bekleniyor.');\r\n  return;\r\n  }\r\n  const msg = { type: 'startGame' };\r\n  console.log('[WS SEND] Gönderilen mesaj:', msg);\r\n  socketRef.current.send(JSON.stringify(msg));\r\n}}\r\n  onInvite={(targetUsername) => {\r\n    console.log('[App.js] Davet gönderiliyor:', targetUsername);\r\n    const msg = { type: 'invite', to: targetUsername };\r\n  console.log('[WS SEND] Gönderilen mesaj:', msg);\r\n  socketRef.current.send(JSON.stringify(msg));\r\n}}\r\n  onLogout={() => {\r\n    setGameOverData(null);\r\n  sessionStorage.removeItem('gameOverData');\r\n\r\n  setUsername('');\r\n  sessionStorage.removeItem('username');\r\n\r\n  sessionStorage.removeItem('currentScreen');\r\n  setCurrentScreen('login');\r\n    }}\r\n  username={userData?.username || username}\r\n  profileImage={profileImage}\r\n  setProfileImage={setProfileImage}\r\n  onlineCount={onlineCount}\r\n  totalGames={totalGames}\r\n  winRate={calculatedWinRate}            \r\n  averageScore={calculatedAverageScore}\r\n  wins={wins}\r\n  losses={losses}\r\n  onAvatarChange={handleAvatarChange}\r\n  \r\n  />\r\n  )}\r\n  {currentScreen === 'newMatch' && (\r\n  <NewMatchScreen\r\n    onBack={() => setCurrentScreen('start')}\r\n    onRandomGame={() => {\r\n      const msg = { type: 'startGame' };\r\n  console.log('[Yeni Oyun] Rastgele rakip başlatılıyor, gönderilen mesaj:', msg);\r\n  socketRef.current.send(JSON.stringify(msg));\r\n}}\r\n    onInvite={(targetUsername) => {\r\n      const msg = { type: 'invite', to: targetUsername };\r\n  console.log('[Yeni Oyun] Davet gönderiliyor, gönderilen mesaj:', msg);\r\n  socketRef.current.send(JSON.stringify(msg));\r\n}}\r\n    onComputerMatch={() => {\r\n      console.log('[Yeni Oyun] Bilgisayara karşı mod (placeholder)');\r\n      // İleride AI maçı eklenecekse burada handle edilecek\r\n    }}\r\n  />\r\n)}\r\n\r\n{currentScreen === 'myGames' && (\r\n  <MyGamesScreen\r\n    username={username}\r\n    setCurrentScreen={setCurrentScreen}\r\n    setGameOverData={setGameOverData}\r\n    setCurrentGame={setCurrentGame}\r\n    \r\n    onJoinGame={joinGame}\r\n  />\r\n)}\r\n\r\n\r\n\r\n  {invitePopup.visible && (\r\n    <InvitePopup\r\n      from={invitePopup.from}\r\n      onAccept={() => {\r\n      if (!acceptSent && invitePopup.from !== username) {\r\n      setAcceptSent(true);\r\n      const msg = { type: 'acceptInvite' };\r\n  console.log('[CLIENT] acceptInvite gönderiliyor:', msg);\r\n  socketRef.current.send(JSON.stringify(msg));\r\n    }\r\n    setInvitePopup({ visible: false, from: null });\r\n  }}\r\n      onReject={() => {\r\n      const msg = { type: 'rejectInvite' };\r\n  console.log('[CLIENT] rejectInvite gönderiliyor:', msg);\r\n  socketRef.current.send(JSON.stringify(msg));\r\n  setInvitePopup({ visible: false, from: null });\r\n}}\r\n    />\r\n  )}\r\n  \r\n  {currentScreen === 'game' && (\r\n    <GameScreen\r\n      key={gameId || 'default'}\r\n      socket={socketRef.current}\r\n      turnData={turnData}\r\n      scores={scores}\r\n      board={board}\r\n      setBoard={setBoard}\r\n      gameId={gameId}\r\n      statusMessage={statusMessage}\r\n      gameEnded={false}\r\n      showGameOver={showGameOver}\r\n      gameOverData={gameOverData}\r\n      confirmDisabled={confirmDisabled}\r\n      setConfirmDisabled={setConfirmDisabled}\r\n      rematchPending={rematchPending}\r\n      setRematchPending={setRematchPending}\r\n      username={username}\r\n      profileImage={profileImage}\r\n      opponentImage={opponentImage}                       \r\n      opponentUsername={opponentUsername}\r\n      onGameOver={(data) => {\r\n      setGameOverData(data);          \r\n      setCurrentScreen('gameOver'); \r\n      }}\r\n      setCurrentScreen={setCurrentScreen}\r\n      isReconnect={isReconnect}\r\n    />\r\n  )}\r\n  {currentScreen === 'gameOver' && (gameOverData || currentGame) && (\r\n  <GameOverScreen\r\n    data={gameOverData || currentGame}\r\n    username={username}                 \r\n    onExit={() => {\r\n      console.log('[CLIENT] exitGame mesajı gönderiliyor...');\r\n      if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\r\n    const msg = { type: 'exitGame' };\r\n  console.log('[CLIENT] exitGame mesajı gönderiliyor:', msg);\r\n  socketRef.current.send(JSON.stringify(msg));\r\n}\r\n      resetGameState();\r\n      setGameOverData(null);\r\n      sessionStorage.removeItem('currentScreen');\r\n      sessionStorage.removeItem('gameOverData');\r\n      setCurrentScreen('start');       \r\n    }}\r\n    onRematch={(opponentUsername) => {\r\n      console.log('[CLIENT] Rematch isteği gönderiliyor:', opponentUsername);\r\n      socketRef.current.send(JSON.stringify({\r\n        type: 'invite',\r\n        to: opponentUsername,\r\n        fromRematch: true\r\n      }));\r\n      setRematchPending(true);\r\n    }}\r\n    rematchPending={rematchPending}\r\n    setRematchPending={setRematchPending}  \r\n  />\r\n)}\r\n</>\r\n</SocketProvider>\r\n    \r\n);\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}